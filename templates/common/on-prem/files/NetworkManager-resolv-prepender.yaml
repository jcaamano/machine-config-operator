mode: 0755
path: "/usr/local/bin/nm-resolv-prepender.sh"
contents:
  inline: |
    #!/bin/bash
    set -eo pipefail

    {{if .Proxy -}}
    {{if .Proxy.HTTPProxy -}}
    export HTTP_PROXY={{.Proxy.HTTPProxy}}
    {{end -}}
    {{if .Proxy.HTTPSProxy -}}
    export HTTPS_PROXY={{.Proxy.HTTPSProxy}}
    {{end -}}
    {{if .Proxy.NoProxy -}}
    export NO_PROXY={{.Proxy.NoProxy}}
    {{end -}}
    {{end -}}
    
    # This script runs periodically (each 30s) and when either of these input files change
    # - /run/NetworkManager/resolv.conf
    # - /run/mco/resolv-prepender.conf (updated form an homonimous NM dispatcher script)
    NM_RESOLV_CONF="/run/NetworkManager/resolv.conf"
    PREPENDER_CONF="/run/mco/resolv-prepender.conf"
    if [ ! -e "$PREPENDER_CONF" ]; then
        >&2 echo "NM resolv-prepender: configuration missing at $PREPENDER_CONF"
        exit
    fi
    if [ ! -e "$NM_RESOLV_CONF" ]; then
        >&2 echo "NM resolv-prepender: resolv.conf missing at $NM_RESOLV_CONF"
        exit
    fi

    # output is either etc or systemd resolv
    SD_RESOLV_CONF="/etc/systemd/resolved.conf.d/60-kni.conf"
    ETC_RESOLV_CONF="/etc/resolv.conf"
    if systemctl -q is-enabled systemd-resolved; then
        RESOLV_CONF=$SD_RESOLV_CONF
    else
        RESOLV_CONF=$ETC_RESOLV_CONF
    fi

    # only run if our input has newer modifications than our output
    if [ -e "$RESOLV_CONF" ] && [ "$RESOLV_CONF" -nt "$NM_RESOLV_CONF" ] && [ "$RESOLV_CONF" -nt "$PREPENDER_CONF" ]; then
        >&2 echo "NM resolv-prepender: no nameserver changes needed for $RESOLV_CONF"
        exit
    fi

    # read config
    . "$PREPENDER_CONF"

    # If $DHCP6_FQDN_FQDN is not empty and is not localhost.localdomain
    if [[ -n "$DHCP6_FQDN_FQDN" && "$DHCP6_FQDN_FQDN" != "localhost.localdomain" && "$DHCP6_FQDN_FQDN" =~ "." ]]; then
        >&2 echo "NM resolv-prepender: updating hostname to $DHCP6_FQDN_FQDN"
        hostnamectl set-hostname --static --transient "$DHCP6_FQDN_FQDN"
    fi

    # Ensure resolv.conf exists and contains nameservers before we try to run podman
    >&2 echo  "NM resolv-prepender: Checking for nameservers in $ETC_RESOLV_CONF"
    if [[ ! -e "$ETC_RESOLV_CONF" ]] || ! grep -q nameserver "$ETC_RESOLV_CONF"; then
        if ! grep nameserver "$NM_RESOLV_CONF"; then
            # no nameservers, do nothing
            >&2 echo  "NM resolv-prepender: $NM_RESOLV_CONF empty of nameservers"
            exit
        fi
        >&2 echo  "NM resolv-prepender: copying $NM_RESOLV_CONF"
        cp "$NM_RESOLV_CONF" "$ETC_RESOLV_CONF"
    fi

    DOMAINS="${IP4_DOMAINS} ${IP6_DOMAINS} {{.DNS.Spec.BaseDomain}}"
    NAMESERVER_IP=$(/usr/bin/podman run --rm \
        --authfile /var/lib/kubelet/config.json \
        --net=host \
        {{ .Images.baremetalRuntimeCfgImage }} \
        node-ip \
        show \
        "{{ onPremPlatformAPIServerInternalIP . }}" \
        "{{ onPremPlatformIngressIP . }}")
    
    if [[ -n "$NAMESERVER_IP" ]]; then
        TMP=$(mktemp)
        if [ "$RESOLV_CONF" = "$SD_RESOLV_CONF" ]; then
            >&2 echo "NM resolv-prepender: Setting up systemd-resolved for OKD domain and local IP"
            echo "[Resolve]" > "$TMP"
            echo "DNS=$NAMESERVER_IP" >> "$TMP"
            echo "Domains=$DOMAINS" >> "$TMP"
            if [ ! -e "${SD_RESOLV_CONF}" ] || ! cmp --silent "$TMP" "${SD_RESOLV_CONF}"; then
                >&2 echo "NM resolv-prepender: Updating $SD_RESOLV_CONF"
                mkdir -p "$(dirname $SD_RESOLV_CONF)"
                mv -f "$TMP" "${SD_RESOLV_CONF}"
                if systemctl -q is-active systemd-resolved; then
                    >&2 echo "NM resolv-prepender: restarting systemd-resolved"
                    systemctl restart systemd-resolved
                fi
            fi
        else
            >&2 echo "NM resolv-prepender: Prepending 'nameserver $NAMESERVER_IP' to /etc/resolv.conf (other nameservers from /var/run/NetworkManager/resolv.conf)"
            sed -e "/Generated by/c# Generated by KNI resolv prepender NM dispatcher script" \
                /var/run/NetworkManager/resolv.conf > "$TMP"
            sed -i "0,/^nameserver.*/s//nameserver $NAMESERVER_IP\n\0/" "$TMP"
            # Make sure cluster domain is first in the search list
            sed -i "s/^search \(.*\)/search {{.DNS.Spec.BaseDomain}} \1/" "$TMP"
            # Remove duplicate cluster domain entries
            sed -i "s/\(search {{.DNS.Spec.BaseDomain}}.*\) {{.DNS.Spec.BaseDomain}}\( .*\|$\)/\1\2/" "$TMP"
            # Only leave the first 3 nameservers in /etc/resolv.conf
            sed -i ':a $!{N; ba}; s/\(^\|\n\)nameserver/\n# nameserver/4g' "$TMP"
            if [ ! -e "${ETC_RESOLV_CONF}" ] || ! cmp --silent "$TMP" "${ETC_RESOLV_CONF}"; then
                mv -f "$TMP" "$ETC_RESOLV_CONF"
                # Workaround for bz 1929160. Reload NetworkManager to force it to
                # re-run the lookup of the hostname now that we know we have DNS
                # servers configured correctly in resolv.conf.
                nmcli general reload dns-rc
            fi
        fi
        rm -f "$TMP"
    fi
    # update our output in any (non error) case to avoid update loops
    touch "$RESOLV_CONF"
